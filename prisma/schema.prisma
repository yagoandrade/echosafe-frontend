generator client {
    provider = "prisma-client-js"
    seed     = "ts-node prisma/seed.ts"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}
// New enum for user roles
enum UserRole {
    STUDENT
    COORDINATOR
    PSYCHOLOGIST
    DIRECTOR
}

model Post {
    id                      Int         @id @default(autoincrement())
    title                   String
    description             String
    AISentimentAnalysis     String?
    AITypeOfBullying        String?
    AIActionRecommendations String?
    status                  String
    label                   String
    priority                String
    associatedInstitution   Institution @relation(fields: [associatedInstitutionId], references: [id])
    associatedInstitutionId Int
    createdAt               DateTime    @default(now())
    updatedAt               DateTime    @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([title])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
    @@map(name: "accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@map(name: "sessions")
}

model User {
    id                     String            @id @default(cuid())
    name                   String?
    email                  String?           @unique
    emailVerified          DateTime?
    password               String?
    salt                   String?
    image                  String?
    isOnboarded            Boolean           @default(false)
    activeInstitution      Institution?      @relation(fields: [activeInstitutionId], references: [id])
    accounts               Account[]
    sessions               Session[]
    stripeCustomerId       String?           @unique @map(name: "stripe_customer_id")
    stripeSubscriptionId   String?           @unique @map(name: "stripe_subscription_id")
    stripePriceId          String?           @map(name: "stripe_price_id")
    stripeCurrentPeriodEnd DateTime?         @map(name: "stripe_current_period_end")
    posts                  Post[]
    UserInstitution        UserInstitution[]
    activeInstitutionId    Int?
    directorOf             Institution[]     @relation("Directors")
    coordinatorOf          Institution[]     @relation("Coordinators")
    psychologistOf         Institution[]     @relation("Psychologists")
    studentOf              Institution[]     @relation("Students")

    @@map(name: "users")
}

model Institution {
    id        Int      @id @default(autoincrement())
    name      String
    location  String
    code      String
    createdBy String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    userInstitutions UserInstitution[]
    userId           String?
    User             User[]
    directors        User[]            @relation("Directors")
    coordinators     User[]            @relation("Coordinators")
    psychologists    User[]            @relation("Psychologists")
    students         User[]            @relation("Students")
    posts            Post[]

    @@map(name: "institutions")
}

model UserInstitution {
    id            Int         @id @default(autoincrement())
    user          User        @relation(fields: [userId], references: [id])
    userId        String
    institution   Institution @relation(fields: [institutionId], references: [id])
    institutionId Int
    role          UserRole

    @@unique([userId, institutionId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map(name: "verification_tokens")
}
